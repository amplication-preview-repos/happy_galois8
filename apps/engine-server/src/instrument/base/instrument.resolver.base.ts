/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Instrument } from "./Instrument";
import { InstrumentCountArgs } from "./InstrumentCountArgs";
import { InstrumentFindManyArgs } from "./InstrumentFindManyArgs";
import { InstrumentFindUniqueArgs } from "./InstrumentFindUniqueArgs";
import { CreateInstrumentArgs } from "./CreateInstrumentArgs";
import { UpdateInstrumentArgs } from "./UpdateInstrumentArgs";
import { DeleteInstrumentArgs } from "./DeleteInstrumentArgs";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { InstrumentService } from "../instrument.service";
@graphql.Resolver(() => Instrument)
export class InstrumentResolverBase {
  constructor(protected readonly service: InstrumentService) {}

  async _instrumentsMeta(
    @graphql.Args() args: InstrumentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Instrument])
  async instruments(
    @graphql.Args() args: InstrumentFindManyArgs
  ): Promise<Instrument[]> {
    return this.service.instruments(args);
  }

  @graphql.Query(() => Instrument, { nullable: true })
  async instrument(
    @graphql.Args() args: InstrumentFindUniqueArgs
  ): Promise<Instrument | null> {
    const result = await this.service.instrument(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Instrument)
  async createInstrument(
    @graphql.Args() args: CreateInstrumentArgs
  ): Promise<Instrument> {
    return await this.service.createInstrument({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Instrument)
  async updateInstrument(
    @graphql.Args() args: UpdateInstrumentArgs
  ): Promise<Instrument | null> {
    try {
      return await this.service.updateInstrument({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Instrument)
  async deleteInstrument(
    @graphql.Args() args: DeleteInstrumentArgs
  ): Promise<Instrument | null> {
    try {
      return await this.service.deleteInstrument(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Transaction], { name: "transactions" })
  async findTransactions(
    @graphql.Parent() parent: Instrument,
    @graphql.Args() args: TransactionFindManyArgs
  ): Promise<Transaction[]> {
    const results = await this.service.findTransactions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
