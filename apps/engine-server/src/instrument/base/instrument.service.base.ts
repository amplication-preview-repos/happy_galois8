/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Instrument as PrismaInstrument,
  Transaction as PrismaTransaction,
} from "@prisma/client";

export class InstrumentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InstrumentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.instrument.count(args);
  }

  async instruments(
    args: Prisma.InstrumentFindManyArgs
  ): Promise<PrismaInstrument[]> {
    return this.prisma.instrument.findMany(args);
  }
  async instrument(
    args: Prisma.InstrumentFindUniqueArgs
  ): Promise<PrismaInstrument | null> {
    return this.prisma.instrument.findUnique(args);
  }
  async createInstrument(
    args: Prisma.InstrumentCreateArgs
  ): Promise<PrismaInstrument> {
    return this.prisma.instrument.create(args);
  }
  async updateInstrument(
    args: Prisma.InstrumentUpdateArgs
  ): Promise<PrismaInstrument> {
    return this.prisma.instrument.update(args);
  }
  async deleteInstrument(
    args: Prisma.InstrumentDeleteArgs
  ): Promise<PrismaInstrument> {
    return this.prisma.instrument.delete(args);
  }

  async findTransactions(
    parentId: string,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.instrument
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }
}
